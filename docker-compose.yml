# Docker Compose para execução completa

services:
  # API Principal
  exoplanet-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: exoplanet-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - API_VERSION=1.0.0
      - LOG_LEVEL=INFO
      - ENABLE_MODEL_CACHING=true
      - CACHE_TTL=3600
      - REDIS_URL=redis://redis:6379/0
      - MODEL_FULL_PATH=/app/models/exoplanet_model.keras
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./cache:/app/cache
      - ./frontend:/app/frontend:ro
    depends_on:
      - redis
    networks:
      - exoplanet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Cache Redis (opcional)
  redis:
    image: redis:7-alpine
    container_name: exoplanet-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - exoplanet-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoramento Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: exoplanet-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - exoplanet-network
    depends_on:
      - exoplanet-api

  # Dashboard Grafana (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: exoplanet-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - exoplanet-network

  # Load Balancer Nginx (opcional)
  nginx:
    image: nginx:alpine
    container_name: exoplanet-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - exoplanet-api
    networks:
      - exoplanet-network

  # Worker para tarefas em background (opcional)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: exoplanet-worker
    restart: unless-stopped
    command: celery -A tasks worker --loglevel=info --concurrency=2
    environment:
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - API_BASE_URL=http://exoplanet-api:8000
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - redis
      - exoplanet-api
    networks:
      - exoplanet-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  exoplanet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
